# Generated by Django 5.1.6 on 2025-03-11 09:53

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Plant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('image', models.ImageField(blank=True, null=True, upload_to='plant_images/')),
                ('scientific_name', models.CharField(blank=True, max_length=150, null=True)),
                ('category', models.CharField(choices=[('flower', 'Flower Plant'), ('vegetable', 'Vegetable Plant'), ('fruit', 'Fruit Plant')], max_length=20)),
                ('soil_type', models.CharField(choices=[('sandy', 'Sandy'), ('loamy', 'Loamy'), ('clay', 'Clay'), ('silt', 'Silt')], max_length=20)),
                ('sunlight', models.CharField(choices=[('full_sun', 'Full Sun'), ('partial_sun', 'Partial Sun'), ('shade', 'Shade')], max_length=50)),
                ('watering_schedule', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('custom', 'Custom')], max_length=20)),
                ('fertilization_needs', models.BooleanField(default=True)),
                ('growth_stages', models.JSONField(default=list)),
                ('pests', models.JSONField(default=list)),
                ('climate_suitability', models.CharField(max_length=255)),
                ('care_instructions', models.TextField()),
                ('companion_plants', models.JSONField(default=list)),
                ('lifespan', models.CharField(max_length=100)),
                ('ideal_temperature', models.CharField(max_length=100)),
                ('humidity_needs', models.CharField(max_length=100)),
                ('characteristics', models.TextField(blank=True, null=True)),
                ('growth_time', models.CharField(blank=True, max_length=100, null=True)),
                ('harvest_time', models.CharField(blank=True, max_length=100, null=True)),
                ('yield_potential', models.CharField(blank=True, max_length=100, null=True)),
                ('disease_resistance', models.CharField(blank=True, max_length=50, null=True)),
                ('seasonal_preferences', models.CharField(blank=True, max_length=100, null=True)),
                ('propagation_methods', models.CharField(blank=True, max_length=255, null=True)),
                ('pruning_needs', models.CharField(blank=True, max_length=255, null=True)),
                ('soil_ph_preference', models.CharField(blank=True, max_length=100, null=True)),
                ('nutrient_requirements', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('Gardener', 'Gardener'), ('Supervisor', 'Supervisor'), ('Homeowner', 'Homeowner'), ('System Admin', 'System Admin')], default='Homeowner', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, related_name='custom_user_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='custom_user_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(blank=True, max_length=255)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('address', models.TextField(blank=True)),
                ('preferred_plant_types', models.JSONField(blank=True, default=list)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('zip_code', models.CharField(blank=True, max_length=10)),
                ('soil_type', models.CharField(blank=True, max_length=50)),
                ('skill_level', models.CharField(blank=True, max_length=50)),
                ('watering_frequency', models.CharField(blank=True, max_length=50)),
                ('maintenance_reminders', models.BooleanField(default=False)),
                ('pest_alerts', models.BooleanField(default=False)),
                ('disease_alerts', models.BooleanField(default=False)),
                ('community_notifications', models.BooleanField(default=True)),
                ('gardening_preferences', models.TextField(blank=True)),
                ('experience_level', models.CharField(blank=True, max_length=50)),
                ('specialization', models.CharField(blank=True, max_length=100)),
                ('availability', models.CharField(blank=True, max_length=50)),
                ('service_area', models.CharField(blank=True, max_length=255)),
                ('certifications', models.TextField(blank=True)),
                ('work_experience', models.IntegerField(blank=True, null=True)),
                ('managed_projects', models.TextField(blank=True)),
                ('responsibilities', models.TextField(blank=True)),
                ('property_type', models.CharField(blank=True, max_length=50)),
                ('garden_size', models.CharField(blank=True, max_length=50)),
                ('preferred_plants', models.TextField(blank=True)),
                ('organic_fertilizer', models.BooleanField(default=False)),
                ('plant_tracking', models.CharField(blank=True, max_length=50)),
                ('admin_level', models.CharField(blank=True, max_length=50)),
                ('assigned_responsibilities', models.TextField(blank=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
